knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(patchwork)
library(ggpubr)
library(dplyr)
library(Hmisc)
library(PerformanceAnalytics)
library(NbClust)
setwd("D:/enjoy/多元统计/上机实验七/上机实验七")
data_0 <- read.csv("ex6.7.csv",encoding = "UTF-8",na.strings=c(""," ","NA"),header=T)
data_0 <- na.omit(data_0)
row.names(data_0) <- data_0[,1]
X<-data_0[,-1]
View(X)
data_0 <- read.csv("ex6.7.csv",encoding = "UTF-8",na.strings=c(""," ","NA"),header=T)
data_0 <- na.omit(data_0)
row.names(data_0) <- data_0[,1]
X<-data_0[,-1]
fre<-factanal(X, 3, scores="Bartlett", rotation="none")
data_0 <- read.csv("ex6.7.csv",encoding = "UTF-8",na.strings=c(""," ","NA"),header=T)
data_0 <- na.omit(data_0)
row.names(data_0) <- data_0[,1]
X<-data_0[,-1]
fre<-factanal(X, 3, scores="Bartlett", rotation="none")
fre
install.packages("nFactors")
# 确定应提取的因子个数
library(nFactors)
ev <- eigen(cor(X)) # 获取特征值
ap <- parallel(subject=nrow(mydata),var=ncol(mydata),
rep=100,cent=.05) # subject指样本个数，var是指变量个数
ev <- eigen(cor(X)) # 获取特征值
ap <- parallel(subject=nrow(X),var=ncol(X),
rep=100,cent=.05) # subject指样本个数，var是指变量个数
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea) # 确定探索性因子分析中应保留的因子
plotnScree(nS) # 绘制碎石图
data_0 <- read.csv("ex6.7.csv",encoding = "UTF-8",na.strings=c(""," ","NA"),header=T)
data_0 <- na.omit(data_0)
row.names(data_0) <- data_0[,1]
X<-data_0[,-1]
# 确定应提取的因子个数
library(nFactors)
ev <- eigen(cor(X)) # 获取特征值
ap <- parallel(subject=nrow(X),var=ncol(X),
rep=100,cent=.05) # subject指样本个数，var是指变量个数
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea) # 确定探索性因子分析中应保留的因子
plotnScree(nS) # 绘制碎石图
#因子分析
fre<-factanal(X, 3, scores="Bartlett", rotation="none")
fre
data_0 <- read.csv("体检数据.csv",encoding = "UTF-8",na.strings=c(""," ","NA"),header=T,row.names = 1)
data_0 <- read.csv("体检数据.csv",encoding = "UTF-8",na.strings=c(""," ","NA"),header=T,row.names = 1)
data_0 <- read.csv("exam.csv",encoding = "UTF-8",na.strings=c(""," ","NA"),header=T,row.names = 1)
sum(is.na(data_0))
View(data_0)
for (i in colnames(data_0)){
data_0[,i] <- impute(data_0[,i],mean)
}
View(data_0)
sum(is.na(data_0))
View(data_0)
which(is.na(data_0[, 1]))
which(is.na(data_0[, 2]))
which(is.na(data_0[, 3]))
which(is.na(data_0[, 4]))
which(is.na(data_0[, 5]))
which(is.na(data_0[, 6]))
View(data_0)
data_0 <- read.csv("exam.csv",encoding = "UTF-8",na.strings=c(""," ","NA","未检"),header=T,row.names = 1)
for (i in colnames(data_0)){
data_0[,i] <- impute(data_0[,i],mean)
}
sum(is.na(data_0))
View(data_0)
which(is.na(data_0[, 6]))
colnames(data_0)
impute(data_0[,"Weight"],mean)
typeof(data_0[,'Weight'])
typeof(data_0)
typeof(data_0[,1])
data_0 <- read.csv("exam.csv",encoding = "UTF-8",na.strings=c(""," ","NA","未检"),header=T,row.names = 1)
for (i in colnames(data_0)){
data_0[,i] <- impute(as.numeric(data_0[,i]),mean)
}
sum(is.na(data_0))
View(data_0)
data_0 <- read.csv("exam.csv",encoding = "UTF-8",na.strings=c(""," ","NA","未检"),header=T,row.names = 1)
View(data_0)
data_0 <- read.csv("exam.csv",encoding = "UTF-8",na.strings=c(""," ","NA","未检"),header=T,row.names = 1)
for (i in colnames(data_0)){
if (i=='Gender'){
data_0[,i] <- as.numeric(factor(data_0[,i]))
}else{
data_0[,i] <- impute(as.numeric(data_0[,i]),mean)
}
}
sum(is.na(data_0))
library(psych)
fa.parallel(data_0,fa="PC",n.iter=100,show.legend=FALSE,main="Screen plot with parallel analysis")
X <- data_0
#极差标准化
center<-sweep(X, 2, apply(X, 2, mean))#按列中心化
R<-apply(X, 2, max)-apply(X, 2, min)#计算列极差
X_star<-sweep(center, 2, R, "/")#极差标准化, 均值为0， 极差为1
X.pr <- princomp(X_star, cor = TRUE)
summary(X.pr, loadings=TRUE)
View(X_star)
fa.parallel(X_star,fa="PC",n.iter=100,show.legend=FALSE,main="Screen plot with parallel analysis")
library(psych)
fa.parallel(X_star,fa="PC",n.iter=100,show.legend=FALSE,main="Screen plot with parallel analysis")
library(psych)
plot.new()
fa.parallel(data_0,fa="PC",n.iter=100,show.legend=FALSE,main="Screen plot with parallel analysis")
library(psych)
plot.new()
fa.parallel(data_0,fa="pc",n.iter=100,show.legend=FALSE,main="Screen plot with parallel analysis")
pc6<-principal(data_0,nfactors=6,rotate=”none”)
pc6<-principal(data_0,nfactors=6,rotate="none")
View(pc6)
View(pc6)
pc6[["loadings"]]
pc6[["scores"]]
X1 <- pc6[["scores"]]
#聚类分析
cl_single <- NbClust(X1, distance="euclidean",
min.nc=2, max.nc=15, method="ward.D2")
View(X.pr)
View(X1)
center<-sweep(X1, 2, apply(X1, 2, mean))#按列中心化
R<-apply(X1, 2, max)-apply(X1, 2, min)#计算列极差
X_star<-sweep(center, 2, R, "/")#极差标准化, 均值为0， 极差为1
d<-dist(X_star,method = "euclidean")
model1=hclust(d,method='ward.D2')
result=cutree(model1,k=2)
plot(model1,cex=0.1,hang=-1);re1<-rect.hclust(model1, k=2, border="red")
model1=hclust(d,method='ward.D2')
model1=hclust(d,method='ward.D2')
result=cutree(model1,k=3)
result=cutree(model1,k=3)
plot(model1,cex=0.1,hang=-1);re1<-rect.hclust(model1, k=3, border="red")
#分析因子数
plot.new()
fa.parallel(data_0,fa="fa",n.iter=100,show.legend=FALSE,main="Screen plot with parallel analysis")
#分析因子数
plot.new()
fa.parallel(data_0,fa="fa",n.iter=100,show.legend=FALSE,main="Screen plot with parallel analysis")
#因子分析
fre<-factanal(data_0, 7, scores="Bartlett", rotation=" varimax ")
#分析因子数
plot.new()
fa.parallel(data_0,fa="fa",n.iter=100,show.legend=FALSE,main="Screen plot with parallel analysis")
#因子分析
fre<-factanal(data_0, 7, scores="Bartlett", rotation="varimax")
fre
#因子分析
fre<-factanal(data_0, 7, scores="Bartlett", rotation="varimax")
fre
